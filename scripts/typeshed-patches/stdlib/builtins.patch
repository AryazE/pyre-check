--- /home/maganomar/unpatched_typeshed/python-typeshed-8aedbda/stdlib/builtins.pyi	2023-02-28 08:50:55.000000000 -0800
+++ /home/maganomar/patched_typeshed/typeshed/stdlib/builtins.pyi	2023-04-05 08:38:23.909978010 -0700
@@ -55,6 +55,7 @@
     type_check_only,
 )
 from typing_extensions import Literal, LiteralString, Self, SupportsIndex, TypeAlias, TypeGuard, final
+from pyre_extensions import Add, Multiply, Divide, ReadOnly
 
 if sys.version_info >= (3, 9):
     from types import GenericAlias
@@ -75,6 +76,8 @@
 _SupportsAnextT = TypeVar("_SupportsAnextT", bound=SupportsAnext[Any], covariant=True)
 _AwaitableT = TypeVar("_AwaitableT", bound=Awaitable[Any])
 _AwaitableT_co = TypeVar("_AwaitableT_co", bound=Awaitable[Any], covariant=True)
+N1 = TypeVar("N1", bound=int)
+N2 = TypeVar("N2", bound=int)
 
 class object:
     __doc__: str | None
@@ -242,10 +245,10 @@
             signed: bool = False,
         ) -> Self: ...
 
-    def __add__(self, __x: int) -> int: ...
-    def __sub__(self, __x: int) -> int: ...
-    def __mul__(self, __x: int) -> int: ...
-    def __floordiv__(self, __x: int) -> int: ...
+    def __add__(self: N1, __x: N2) -> Add[N1, N2]: ...
+    def __sub__(self: N1, __x: N2) -> Add[N1, Multiply[Literal[-1], N2]]: ...
+    def __mul__(self: N1, __x: N2) -> Multiply[N1, N2]: ...
+    def __floordiv__(self: N1, __x: N2) -> Divide[N1, N2]: ...
     def __truediv__(self, __x: int) -> float: ...
     def __mod__(self, __x: int) -> int: ...
     def __divmod__(self, __x: int) -> tuple[int, int]: ...
@@ -1036,10 +1039,10 @@
     @overload
     def __init__(self: dict[str, str], __iterable: Iterable[list[str]]) -> None: ...
     def __new__(cls, *args: Any, **kwargs: Any) -> Self: ...
-    def copy(self) -> dict[_KT, _VT]: ...
-    def keys(self) -> dict_keys[_KT, _VT]: ...
-    def values(self) -> dict_values[_KT, _VT]: ...
-    def items(self) -> dict_items[_KT, _VT]: ...
+    def copy(self: ReadOnly[Self]) -> dict[_KT, _VT]: ...
+    def keys(self: ReadOnly[Self]) -> dict_keys[_KT, _VT]: ...
+    def values(self: ReadOnly[Self]) -> dict_values[_KT, _VT]: ...
+    def items(self: ReadOnly[Self]) -> dict_items[_KT, _VT]: ...
     # Signature of `dict.fromkeys` should be kept identical to `fromkeys` methods of `OrderedDict`/`ChainMap`/`UserDict` in `collections`
     # TODO: the true signature of `dict.fromkeys` is not expressible in the current type system.
     # See #3800 & https://github.com/python/typing/issues/548#issuecomment-683336963.
@@ -1051,18 +1054,18 @@
     def fromkeys(cls, __iterable: Iterable[_T], __value: _S) -> dict[_T, _S]: ...
     # Positional-only in dict, but not in MutableMapping
     @overload
-    def get(self, __key: _KT) -> _VT | None: ...
+    def get(self: ReadOnly[Self], __key: _KT) -> _VT | None: ...
     @overload
-    def get(self, __key: _KT, __default: _VT | _T) -> _VT | _T: ...
+    def get(self: ReadOnly[Self], __key: _KT, __default: _VT | _T) -> _VT | _T: ...
     @overload
-    def pop(self, __key: _KT) -> _VT: ...
+    def pop(self: ReadOnly[Self], __key: _KT) -> _VT: ...
     @overload
-    def pop(self, __key: _KT, __default: _VT | _T) -> _VT | _T: ...
+    def pop(self: ReadOnly[Self], __key: _KT, __default: _VT | _T) -> _VT | _T: ...
     def __len__(self) -> int: ...
-    def __getitem__(self, __key: _KT) -> _VT: ...
-    def __setitem__(self, __key: _KT, __value: _VT) -> None: ...
+    def __getitem__(self: ReadOnly[Self], __key: _KT) -> _VT: ...
+    def __setitem__(self: ReadOnly[Self], __key: _KT, __value: _VT) -> None: ...
     def __delitem__(self, __key: _KT) -> None: ...
-    def __iter__(self) -> Iterator[_KT]: ...
+    def __iter__(self: ReadOnly[Self]) -> Iterator[_KT]: ...
     if sys.version_info >= (3, 8):
         def __reversed__(self) -> Iterator[_KT]: ...
     __hash__: ClassVar[None]  # type: ignore[assignment]
@@ -1865,6 +1868,11 @@
         __notes__: list[str]
         def add_note(self, __note: str) -> None: ...
 
+    # Define `__str__` and `__repr__` explicitly so pysa can mark them as sources.
+    def __str__(self) -> str: ...  # noqa: Y029
+    def __repr__(self) -> str: ...  # noqa: Y029
+
+
 class GeneratorExit(BaseException): ...
 class KeyboardInterrupt(BaseException): ...
 
